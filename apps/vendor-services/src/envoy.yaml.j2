admin:
  access_log_path: /var/log/envoy/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http
          use_remote_address: true
          route_config:
            name: local_route
            virtual_hosts:
            - name: virtual_host
              domains: ["{{ downstream_hostname_port }}"]
              routes:
              - match: 
                  prefix: "/"
                route:
                  cluster: grpc_service_cluster
                  max_grpc_timeout: 0s
                  idle_timeout: 0s 
              # Allow CORS so that the upstream GRPC server doesn't
              # need to handle CORS in code
              cors:
                allow_origin_string_match:
                - prefix: "*"
                allow_methods: "POST, OPTIONS"
                allow_headers: "dnt,x-requested-with,x-accept-content-transfer-encoding,x-accept-response-streaming,if-modified-since,cache-control,connection,keep-alive,user-agent,sec-fetch-site,sec-fetch-mode,sec-fetch-dest,content-type,content-transfer-encoding,x-user-agent,x-grpc-web,x-auth-token"
                # These headers are made by grpc-web Envoy's plugin when there is call error
                # and they need to be exposed for grpc-web js client to read 
                expose_headers: "grpc-message, grpc-status, x-auth-token"
                max_age: "86400" # 24h, it's enough for caching prelight request
          http_filters:
          - name: envoy.filters.http.grpc_web
          - name: envoy.filters.http.cors
          - name: envoy.filters.http.router
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              # To customize access log format, see
              # https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/access_loggers/file/v3/file.proto
              "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
              # See command operator at
              # https://www.envoyproxy.io/docs/envoy/v1.17.2/configuration/observability/access_log/usage#command-operators
              format: |
                [%START_TIME%] %DOWNSTREAM_LOCAL_ADDRESS% "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%" "%REQ(:AUTHORITY)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" %RESPONSE_CODE% "%RESP(grpc-status?)% %RESP(grpc-message?)%" %RESPONSE_FLAGS% "%RESPONSE_CODE_DETAILS%" %DURATION%ms "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
              path: /var/log/envoy/access.log 
  clusters:
  - name: grpc_service_cluster
    connect_timeout: 1s
    type: STRICT_DNS
    http2_protocol_options: {}
    lb_policy: round_robin
    load_assignment:
      cluster_name: grpc_service_cluster
      endpoints:
      - lb_endpoints:
        # Schema at https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/endpoint/v3/endpoint_components.proto#envoy-v3-api-msg-config-endpoint-v3-endpoint
        - endpoint:
            address:
              socket_address:
                address: {{ upstream_hostname }}
                port_value: {{ upstream_port }}

